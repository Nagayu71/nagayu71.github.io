{
  "hash": "b844bd68a7c9ae56827d3ce526608117",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Metropolis-Hastings アルゴリズム\"\nsubtitle: \"Python による実装\"\nauthor: \"岩永悠希\"\ndate: \"2024/09/27\"\ndate-modified: \"2024/09/27\"\ncategories: [Bayesian, MCMC, Sampling, Python]\nimage: ./images/MH.png\nbibliography:\n    - ../../../assets/references.bib\nabstract-title: 概要\nabstract: |\n  MCMC (Markov Chain Monte Carlo) とは，任意の確率分布からのサンプリングを実現するモンテカルロ法である．\n  本稿では MCMC の一つである Metropolis-Hastings (MH) 法を @chib1995 に沿って説明し，Python で実装することで MH 法への理解を深めたい．\nformat: html\n---\n\n\n## モチベーション\n\nMCMC とは，任意の確率分布 $f(\\cdot)$ を定常分布にもつマルコフ連鎖を生成することで，所望の分布 $f(\\cdot)$ に従う乱数を生成するモンテカルロ法である．\n\nある確率分布に従う乱数が欲しい，あるいは確率分布を数値的に近似したいというシーンはしばしばある．\n\n例えば，ベイズ統計学ではデータ $D$ から得た情報によって，パラメータ $\\theta$ に対する信念とも言える事前分布 $p(\\theta)$ を事後分布 $p(\\theta|D)$ に更新し，この事後分布を使って推定を行う．\n\n$$\np(\\theta|D) = \\frac{p(D|\\theta)p(\\theta)}{p(D)}\n$$\n\nしかし，事後分布を解析的に導くことは，共役事前分布など特別な場合を除いて困難である．\n\nそこで，事後分布が定常分布となるような遷移確率（推移確率）を決めてパラメータについてのマルコフ連鎖 $(\\theta_t)_{t\\geqslant 0}$ を生成し，事後分布を数値的に近似することを考える．\n\nここで生じる問題は，どのようにしてパラメータについての遷移確率を決めれば良いかである．\n\n::: {.callout-tip appearance=\"simple\" icon=\"true\"}\nマルコフ連鎖については，Zenn に投稿している[マルコフ連鎖勉強ノート](https://zenn.dev/nagayu71/books/markov_chains_note)を参照．\n:::\n\n## Metropolis-Hastings アルゴリズム\n\nMetropolis-Hastings (MH) 法は，目標分布 (target distribution) $\\pi(\\cdot)$ を定常分布にもつマルコフ連鎖を生成するアルゴリズムの一つである．\n\n前述のベイズ統計学の例で言うと，事後分布 $p(\\theta|D)$ が目標分布 $\\pi(\\theta)$ ということになる． 本稿では引き続きこの例を使用し，パラメータ $\\theta \\in \\Theta \\subset \\R^d$ の従う分布 $\\pi(\\theta)$ を目標分布だと考えて議論を進める．\n\n### 提案分布の導入\n\nマルコフ連鎖は，状態空間 (state space) と状態間の遷移確率で規定される． 現時点でわかっていることは，パラメータ $\\theta$ が状態空間 $\\Theta$ の一つの状態を表すということだけで，どのような遷移確率で状態遷移するかは未知である．\n\nそこで，状態 $\\theta$ の下での提案分布 $q(\\theta, \\theta')$ を適当に導入する． ただし，$\\int_\\Theta q(\\theta, \\theta') d\\theta' = 1$である． 提案分布はマルコフ連鎖 $(\\theta_t)$ が状態 $\\theta$ にあるとき，来期の状態 $\\theta'$ が条件付き確率 $q(\\theta, \\theta')$ で決まることを意味する．\n\nもし提案分布 $q(\\theta, \\theta')$ が詳細釣り合い条件\n\n$$\n\\pi(\\theta)q(\\theta, \\theta') = \\pi(\\theta')q(\\theta', \\theta) \\quad \\forall \\theta, \\theta' \\in \\Theta\n$$ {#eq-detailed-balance}\n\nを満たすなら，目標分布 $\\pi(\\cdot)$ を定常分布にもつマルコフ連鎖の遷移確率を得たことになるので，$q(\\theta, \\theta')$ を用いてサンプリングすれば良い． 実際，@eq-detailed-balance の両辺を $\\theta'$ について積分すれば，$\\pi(\\cdot)$ が定常分布であることがわかる：\n\n$$\n\\pi(\\theta) = \\int_\\Theta \\pi(\\theta')q(\\theta', \\theta) d\\theta'.\n$$\n\nしかし，$q(\\theta, \\theta')$ は適当に設定した分布なので @eq-detailed-balance は一般には成り立たない． ここで，一般性を失わずに\n\n$$\n\\pi(\\theta)q(\\theta, \\theta') > \\pi(\\theta')q(\\theta', \\theta)\n$$ {#eq-inequality}\n\nと仮定する． 目標分布 $\\pi(\\theta)$ を状態 $\\theta$ にある人の割合と思えば，@eq-inequality は状態 $\\theta$ から $\\theta'$ に移動する人の割合が，逆に $\\theta'$ から $\\theta$ に移動する人の割合よりも大きいということを表している．\n\n### 状態遷移の制限\n\n詳細釣り合い条件（@eq-detailed-balance）は，両者の割合が同じであってほしいという要請なので，人の移動に交通規制をかけて状態間の移動人数が釣り合うようにしよう． 具体的には，状態 $\\theta$ から $\\theta'$ への移動を制限する確率 $\\alpha(\\theta, \\theta') < 1$ を導入し，$\\theta$ から $\\theta'$ へ移動する人の数を減らせば良い． この任意の2点間の移動を制限する確率 $\\alpha(\\cdot, \\cdot) \\in [0,1]$ をここでは交通規制率と呼ぶことにする[^1]．\n\n[^1]: 一般には採択比率 (acceptance ratio) や採択確率 (acceptance probability) などと呼ばれる．\n\n::: {.callout-important appearance=\"simple\" icon=\"true\"}\nこの時点で考えている問題が，どのような提案分布を設定すべきかという問題から交通規制率を求める問題に変化したことに注意．\n:::\n\n交通規制率を導入すれば，状態 $\\theta$ と $\\theta' \\neq \\theta$ の間の移動は\n\n$$\n\\begin{cases}\np_\\text{MH}(\\theta, \\theta') \\equiv q(\\theta, \\theta')\\alpha(\\theta, \\theta') \\\\\np_\\text{MH}(\\theta', \\theta) = q(\\theta', \\theta)\\alpha(\\theta', \\theta)\n\\end{cases}\n\\qquad (\\theta \\neq \\theta')\n$$ {#eq-pmh}\n\nに従って行われることになる． @eq-inequality は $\\theta'$ から $\\theta$ への移動数が不十分だと主張しているので，この方向の移動については規制をかけず $\\alpha(\\theta', \\theta) = 1$ と設定する．\n\n以上のように $\\theta$ から $\\theta'$ への移動には規制をかけ，$\\theta'$ から $\\theta$ の移動を全て許可すれば，詳細釣り合い条件\n\n$$\n\\pi(\\theta)p_\\text{MH}(\\theta, \\theta') = \\pi(\\theta')p_\\text{MH}(\\theta', \\theta)\n$$ {#eq-detailed-balance-pmh}\n\nが成り立つので，@eq-pmh を使って書き下すと次式を得る：\n\n$$\n\\begin{aligned}\n\\pi(\\theta)q(\\theta, \\theta')\\alpha(\\theta, \\theta') &= \\pi(\\theta')q(\\theta', \\theta)\\alpha(\\theta', \\theta) \\\\\n&= \\pi(\\theta')q(\\theta', \\theta).\n\\end{aligned}\n$$\n\nこれを $\\alpha(\\theta, \\theta')$ について解けば，\n\n$$\n\\alpha(\\theta, \\theta') = \n\\frac{\\pi(\\theta')q(\\theta', \\theta)}{\\pi(\\theta)q(\\theta, \\theta')}\n$$\n\nと交通規制率を求めることができる． この $\\alpha(\\theta, \\theta')$ は @eq-inequality の大小関係の下で導出されたが，不等号が逆向きの場合も同様にして求めることができる．\n\n一度ここまでの議論をまとめよう．\n\n::: {.callout-tip appearance=\"simple\" icon=\"false\"}\n1.  目標分布 $\\pi(\\theta)$ を定常分布にもつマルコフ連鎖 $(\\theta_t)$ の遷移確率が未知なので，代わりに提案分布 $q(\\theta, \\theta')$ を導入した．\n2.  提案分布が詳細釣り合い条件（@eq-detailed-balance）を直接満たすとは限らないので，所与の提案分布に対して詳細釣り合い条件が成り立つように交通規制率を次式で定めた[^2]．\n\n$$\n\\alpha(\\theta, \\theta') = \n\\min\\left\\{ 1, \\frac{\\pi(\\theta')q(\\theta', \\theta)}{\\pi(\\theta)q(\\theta, \\theta')} \\right\\}\n\\qquad (\\theta \\neq \\theta')\n$$ {#eq-MH-ratio}\n:::\n\n[^2]: @eq-inequality の不等号の向きがどちらの場合であっても対応できるように $\\min\\{\\}$ を使用．<br>流出する人の数（分母）が流入する人の数（分子）よりも大きい場合のみ交通規制をかけるということ．\n\n### 遷移確率の定式化\n\nこれまでの議論では，状態遷移 $\\theta\\to\\theta'$ について $\\theta' \\neq \\theta$ であることを暗に仮定していた．MH 法の遷移確率を定式化するには，状態が $\\theta$ にとどまるケース $\\theta\\to\\theta$ も考える必要がある．\n\n状態が $\\theta$ にとどまる確率は次式で与えられる．\n\n$$\n\\begin{aligned}\nr(\\theta) \n&= 1 - \\int_\\Theta p_\\text{MH}(\\theta, \\theta') d\\theta'\\\\\n&= 1 - \\int_\\Theta q(\\theta, \\theta')\\alpha(\\theta, \\theta') d\\theta'\n\\end{aligned}\n$$ {#eq-prob-stay}\n\n@eq-prob-stay を用いると MH 法の遷移確率 $P_\\text{MH}(\\theta, \\theta')$ は，\n\n$$\n\\begin{aligned}\nP_\\text{MH}(\\theta, \\theta') \n&= p_\\text{MH}(\\theta, \\theta') + \\delta(\\theta' -\\theta)r(\\theta) \\\\\n&= q(\\theta, \\theta')\\alpha(\\theta, \\theta') + \\delta(\\theta' -\\theta)r(\\theta)\n\\end{aligned}\n$$ {#eq-Pmh}\n\nである． ただし，$\\delta(x)$ はディラックのデルタ関数である[^3]．\n\n[^3]: $x=0$ のとき $1$ をとり，それ以外の $x$ で $0$ をとる関数．\n\n::: {.callout-tip icon=\"false\"}\n## 命題\n\n@eq-Pmh で与えられるMH 法の遷移確率 $P_\\text{MH}(\\theta, \\theta')$ の下で，目標分布 $\\pi(\\cdot)$ は定常分布である． すなわち，\n\n$$\n\\int_\\Theta \\pi(\\theta)P_\\text{MH}(\\theta, \\theta') d\\theta = \\pi(\\theta') \\qquad \\forall\\theta,\\theta'\\in\\Theta.\n$$\n:::\n\n::: {.callout-warning icon=\"false\" collapse=\"true\"}\n## 証明\n\n$\\theta,\\theta'\\in\\Theta$ を任意にとる． @eq-detailed-balance-pmh を用いると次式が成り立つ．\n\n$$\n\\begin{aligned}\n\\int_\\Theta \\pi(\\theta)P_\\text{MH}(\\theta, \\theta') d\\theta\n&= \\int_\\Theta \\pi(\\theta)\\left[ p_\\text{MH}(\\theta, \\theta') + \\delta(\\theta' -\\theta)r(\\theta) \\right] d\\theta \\\\\n&= \\int_\\Theta \\textcolor{salmon}{\\pi(\\theta)p_\\text{MH}(\\theta, \\theta')}d\\theta + \\int_\\Theta \\pi(\\theta)\\delta(\\theta' -\\theta)r(\\theta)d\\theta \\\\\n&= \\int_\\Theta \\textcolor{salmon}{\\pi(\\theta')p_\\text{MH}(\\theta', \\theta)}d\\theta + \\pi(\\theta')r(\\theta') \\\\\n&= \\pi(\\theta')\\int_\\Theta p_\\text{MH}(\\theta', \\theta)d\\theta + \\pi(\\theta')\\left[1 - \\int_\\Theta p_\\text{MH}(\\theta', \\theta) d\\theta\\right] \\\\\n&= \\pi(\\theta').\n\\end{aligned}\n$$\n:::\n\n### MH アルゴリズム\n\nMH 法をアルゴリズムとして書き下すと，次のようになる．\n\n::: {.callout-note icon=\"false\"}\n## Pseudocode for Metropolis Hastings method\n\nInput: The number of samples $N$ and starting point $\\theta_0$.\n\n1.  **for** n = 1,..., N **do**\n2.   Propose $\\theta' \\sim q(\\theta_{n-1}, \\theta')$.\n3.   Compute the acceptance ratio given by\n\n$$\n\\alpha(\\theta_{n-1}, \\theta') = \n\\min\\left\\{ 1, \\frac{\\pi(\\theta')q(\\theta', \\theta_{n-1})}{\\pi(\\theta_{n-1})q(\\theta_{n-1}, \\theta')} \\right\\}.\n$$\n\n4.   Draw $u \\sim \\text{Uniform}[0, 1)$.\n5.   If $u < \\alpha(\\theta_{n-1}, \\theta')$, then set $\\theta_n = \\theta'$.\n6.   Otherwise reject the proposal $\\theta'$ and set $\\theta_n = \\theta_{n-1}$.\n7.  **end for**\n8.  Discard first burnin samples and return the remaining samples.\n:::\n\n特に，提案分布が $q(\\theta_{n-1}, \\theta') = q(\\theta', \\theta_{n-1})$ と対称的である場合は acceptance ratio が\n\n$$\n\\alpha(\\theta_{n-1}, \\theta') = \n\\min\\left\\{ 1, \\frac{\\pi(\\theta')}{\\pi(\\theta_{n-1})} \\right\\}\n$$\n\nと簡単になり，解釈もしやすくなる．\n\nつまり，$\\theta_{n-1}\\to\\theta'$ の状態遷移で目標分布 $\\pi(\\cdot)$ の山を登る方向の移動\n\n$$\n\\pi(\\theta_{n-1}) \\leqslant \\pi(\\theta') \\iff \n\\frac{\\pi(\\theta')}{\\pi(\\theta_{n-1})} \\geqslant 1\n$$\n\nは確率 $1$ で許可されるが，逆に山を降る方向の移動\n\n$$\n\\pi(\\theta_{n-1}) > \\pi(\\theta') \\iff \n\\frac{\\pi(\\theta')}{\\pi(\\theta_{n-1})} < 1\n$$\n\nについては，確率 $\\alpha(\\theta_{n-1}, \\theta') = \\pi(\\theta') / \\pi(\\theta_{n-1})$ で移動が許可される．\n\n![Source: @chib1995](./images/target-distribution.png){width=\"60%\"}\n\n@chib1995 の図を借りると，$\\pi(\\cdot)$ という山で現在地 $x$ の標高よりも高い地点 $y_1$ に登る提案は 100% 受け入れられ，標高の低い地点 $y_2$ に移動する提案は $\\alpha(x, y_2)$ で確率的に受け入れられるということだ．\n\n## Python による実装\n\n上記のMHアルゴリズムを `metropolis_hastings()` として実装する．\n提案分布には平均 $\\theta_{t-1}$，標準偏差 `proposal_std` を持つ対称的な正規分布を使用する．\nしたがって，acceptance ratio は目標分布の比に一致する．\n\nここでは，標準正規分布を目標分布とし，確率密度\n\n$$\nf(x) = \\frac{1}{\\sqrt{2\\pi}}\\exp\\left(-\\frac{x^2}{2}\\right)\n$$\n\nからMH法によってサンプリングを行う関数を実装する．\n\n### 実装\n\n::: {#007862f9 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef standard_normal(x):\n    \"\"\"目標分布 f(x) に比例する関数。ここでは標準正規分布を使用。\"\"\"\n    return np.exp(-0.5 * x**2)  # 正規化定数は除く\n\ndef metropolis_hastings(N, x_0, proposal_std):\n    \"\"\"\n    Metropolis-Hastings アルゴリズムによるサンプリング\n    \n    N:            サンプル数\n    x_0:          初期値\n    proposal_std: 提案分布の標準偏差\n    \"\"\"\n\n    samples =[]\n    x = x_0\n\n    for _ in range(N):\n        x_new = np.random.normal(loc=x, scale=proposal_std)\n\n        acceptance_ratio = standard_normal(x_new) / standard_normal(x)\n\n        if np.random.rand() < acceptance_ratio:\n            x = x_new\n\n        samples.append(x)\n\n    return samples\n```\n:::\n\n\n### サンプリング\n\n`metropolis_hastings()` を使って標準正規分布から `N=10000` 個サンプリングを行い，そのトレースプロットを描いてみる．\n初期値は `x_0=0` に設定する．\n\n::: {#2c77a4bd .cell execution_count=2}\n``` {.python .cell-code}\n# サンプリング\nsamples1 = metropolis_hastings(N=10000, x_0=0, proposal_std=1.0)\n\n# トレースプロット\nplt.figure(figsize=(8, 4))\nplt.plot(samples1, lw=0.8)\nplt.title('Trace Plot of Samples')\nplt.xlabel('Iteration')\nplt.ylabel('Sample Value')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](metropolis-hastings_files/figure-html/cell-3-output-1.png){width=662 height=376}\n:::\n:::\n\n\nチェーンの最初の部分は初期値依存性があるので，サンプルの最初の 2000 個を burnin として捨て，残りの 8000 個のヒストグラムと目標分布を重ねて描いてみる．\n\n::: {#43703cc0 .cell execution_count=3}\n``` {.python .cell-code}\n# サンプルと目標分布のプロット\nplt.figure(figsize=(8, 4))\nplt.hist(samples1[2000:], bins=50, density=True, alpha=0.8, color='#78C2AD', label='Sampled distribution')\nx = np.linspace(-4, 4, 1000)\nplt.plot(x, 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2), '#FF7A72', lw=2, label='Target distribution N(0,1)')\nplt.title('Metropolis-Hastings Sampling')\nplt.xlabel('x')\nplt.ylabel('Density')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](metropolis-hastings_files/figure-html/cell-4-output-1.png){width=672 height=376}\n:::\n:::\n\n\nおおよそ目標分布（赤線）を数値的に近似できている様子が見て取れる．\n次に，初期値を `x_0=3` に変え， `N=100000` 個サンプリングを行ってみる．\nサンプルサイズが増えるので，ヒストグラムはより赤線に近い形になるはずである．\n\n::: {#4bbf0542 .cell execution_count=4}\n``` {.python .cell-code}\n# 初期値とサンプルサイズを変えてみる\nsamples2 = metropolis_hastings(N=100000, x_0=3, proposal_std=1.0)\n\n# トレースプロット\nplt.figure(figsize=(10, 4))\nplt.plot(samples2, lw=0.5)\nplt.title('Trace Plot of Samples')\nplt.xlabel('Iteration')\nplt.ylabel('Sample Value')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](metropolis-hastings_files/figure-html/cell-5-output-1.png){width=810 height=376}\n:::\n:::\n\n\n::: {#9a9e743b .cell execution_count=5}\n``` {.python .cell-code}\n# サンプルと目標分布のプロット\nplt.figure(figsize=(8, 4))\nplt.hist(samples2, bins=50, density=True, alpha=0.8, color='#78C2AD', label='Sampled distribution')\nx = np.linspace(-4, 4, 1000)\nplt.plot(x, 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2), '#FF7A72', lw=2, label='Target distribution N(0,1)')\nplt.title('Metropolis-Hastings Sampling')\nplt.xlabel('x')\nplt.ylabel('Density')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](metropolis-hastings_files/figure-html/cell-6-output-1.png){width=672 height=376}\n:::\n:::\n\n\n### おまけ：R のコード\n\n上記の一連の流れを以下の R コードで行うこともできる．\n\n```{{r}}\n# 目標分布（標準正規分布）\nstandard_norm <- function(x) {\n    return(exp(-0.5 * x^2))\n}\n\n# MH アルゴリズム\nmetropolis_hastings <- function(x_0, N, proposal_std) {\n    x <- x_0\n    samples <- numeric(N)\n\n    for (n in 1:N) {\n        x_new <- rnorm(1, mean = x, sd = proposal_std)\n\n        acceptance_ratio <- standard_norm(x_new) / standard_norm(x)\n\n        if (runif(1) < acceptance_ratio) {\n            x <- x_new\n        }\n\n        samples[n] <- x\n    }\n    return(samples)\n}\n\n# MH法によるサンプリング\nsamples <- metropolis_hastings(0, 10000, 1.0)\n\n# トレースプロット\nplot(samples, type=\"l\", col=\"blue\", \n    main=\"Trace Plot of MH Sampling\", \n    xlab=\"Iteration\", ylab=\"Sample Value\")\n\n# サンプルのヒストグラムとターゲット分布のプロット\nhist(samples, breaks = 50, probability = TRUE, col = \"lightblue\", \n     main = \"Metropolis-Hastings Sampling\", xlab = \"x\")\n\n# 標準正規分布を重ねてプロット\ncurve(dnorm(x, mean = 0, sd = 1), col = \"red\", lwd = 2, add = TRUE)\n```\n\n",
    "supporting": [
      "metropolis-hastings_files"
    ],
    "filters": [],
    "includes": {}
  }
}